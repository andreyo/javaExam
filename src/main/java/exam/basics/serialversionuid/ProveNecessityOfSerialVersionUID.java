package exam.basics.serialversionuid;

import exam.basics.serialversionuid.bean.Address;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

/**
 * User: andrey.osipov
 * Date: 5/16/12
 * Time: 10:14 AM
 */
public class ProveNecessityOfSerialVersionUID {

    /**
     * http://www.mkyong.com/java-best-practices/understand-the-serialversionuid/
     *
     * serialVersionUID - if not specified for class (implements Serializable) - is
     * generated by JVM automatically
     *
     *      examples where a problem may happen:
     *
     * 1. Client / Server environment
     *
     * - Client is using SUNâ€™s JVM in Windows.
     * - Server is using JRockit in Linux.
     *
     * Client sends a serializable class with default generated serialVersionUID (e.g 123L)
     * to server over socket, server may generate a different serialVersionUID (e.g 124L) to
     * this class at compilation time, and during deserialization process it tries to put it
     * into server's class  -> InvalidClassException.
     */

    public void writeObject(Address address, String path) throws IOException {
        FileOutputStream fout = new FileOutputStream(path);
        ObjectOutputStream oos = new ObjectOutputStream(fout);
        oos.writeObject(address);
        oos.close();
    }

    public Address readObject(String path) throws Exception {
        FileInputStream fin = new FileInputStream(path);
        ObjectInputStream ois = new ObjectInputStream(fin);
        Address address = (Address) ois.readObject();
        ois.close();
        return address;
    }
}